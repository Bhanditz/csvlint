<% content_for :title do %>
  Check your CSV files with CSVLint
<% end %>

<div class="row">
  <div class="col-md-6">
    <p class="lead">CSV looks easy, but it can be hard to make a CSV file that other people can read easily.</p>

    <p>CSVLint helps you to check that your CSV file is readable. And you can use it to check whether it contains the columns and types of values that it should.</p>

    <p>Just enter the location of the file you want to check, or upload it. If you have a schema which describes the
    contents of the CSV file, you can also give its URL or upload it. <a href="/about">Read more...</a></p>
  </div>
  <div class="col-md-6 primary">
    <%= form_tag package_index_path, multipart: true, id: "validation_form" do %>
          <div id="url">
            <div class="input-group url-template url-group hidden" style="margin-top: 5px">
              <%= url_field_tag 'urls[]', '', class: 'form-control', placeholder: t(:enter_url)%>
            </div>
            <label for="url_0" class="options options-first"><%= t(:enter_link) %></label>
            <div class="input-group url-group">
              <%= url_field_tag 'urls[]', '', class: 'form-control', id: 'url_0', placeholder: t(:enter_url) %>
              <span class="input-group-btn btn btn-info btn-clone btn-square-icon">+</span>
            </div>
          </div>

          <label for="upload_file" class="options">Or upload a file:</label>
          <div class="input-group">
            <%= file_field_tag 'files[]', multiple: true, class: 'file-chooser btn-info btn-lg', id: 'upload_file', title: 'Choose a file' %>
          </div>


        <div class="checkbox">
          <label>
            <%= check_box_tag 'schema' %>
            <%= label_tag 'schema', 'Add optional schema'%>
          </label>
        </div>

      <div id="schemas" class="hidden">

            <%= url_field_tag 'schema_url', '', class: 'form-control', placeholder: t(:enter_schema_url)%>
            <p>Or upload a file:</p>
            <div class="input-group">
              <%= file_field_tag 'schema_file', class: 'file-chooser btn-info btn-lg', title: 'browse' %>
            </div>
      </div>

      <button type="submit" class="btn btn-primary btn-block btn-lg" id="submit">
        <span class="spinner"><i class="glyphicon glyphicon-ok"></i></span>
        <%= t(:validate).titleize %>
      </button>
        <div id="ajax-error" class="hidden">
          <button type="button" id="dismiss-ajax-alert" class="close">&times;</button>
          <p id="ajax-info"></p>
        </div>
        <p class="more-information">Submitted urls are recorded in a public <a href="/validation">list of validation reports</a>. If you want to validate private data then upload a file from your computer, using the Browse button below.</p>
      <% end %>
  </div>

</div>


<% content_for :extra_javascript do %>

<script type="text/javascript">
	$(document)
		.on('change', '.btn-file :file', function() {
			var input = $(this),
			numFiles = input.get(0).files ? input.get(0).files.length : 1,
			label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
			input.trigger('fileselect', [numFiles, label]);
	});

	$(document).ready( function() {
	  var count = 1


		$('.btn-file :file').on('fileselect', function(event, numFiles, label) {

			var input = $(this).parents('.input-group').find(':text'),
				log = numFiles > 1 ? numFiles + ' files selected' : label;

			input.val(log);
		});

		$('#schema').prop('checked', false).click(function() {
		  $('#schemas').toggleClass('hidden', !this.checked)
		})

		$('.btn-clone').click(function() {
		  cloned = $('.url-template:first').clone().appendTo('#url').removeClass('hidden');
		  cloned.find('input:first').attr('id', 'url_' + count);
		  $('.btn-clone:first').appendTo('.url-template:last');
		  count = count + 1
		})

		$('#validation_form').submit(function(e){
		  e.preventDefault();

		  $('#submit i').attr('class', 'fa fa-refresh fa-spin')

            files = [];
            urls = [];
            validation_count = 0;

          $.each($("#schema_file")[0].files, function(index, file) {
            file.category = "schema"
            files.push(file);
          });

          $.each($("#upload_file")[0].files, function(index, file) {
            file.category = "csv"
            files.push(file)
            validation_count++;
          });

          $( "input[name='urls[]']" ).each(function(){
            if ($(this).val().length > 0) {
              urls.push($(this).val());
              validation_count++;
            }
          });

          readFiles(files, function(files, schema_file) {

          postdata = {
            "files_data[]": files,
            "schema": $('#schema').prop("checked") ? 1 : 0,
            "schema_data": schema_file,
            "schema_url": $('#schema_url').val(),
            "urls[]": urls,
          }

            postData(postdata);
          });

		}) // end on submit function

		function readFiles(files, callback) {
		  csvs = [];
		  schema_file = "";
		  count = files.length;
		  if (count == 0) callback(null)
		  $.each(files, function(index, file) {
		    readFile(file, function(obj) {
		      if (file.category == "schema") {
		        schema_file = buildFile(obj);
		      } else {
		        csvs.push(buildFile(obj));
	        }
		      if (!--count) callback(csvs, schema_file);
		    });
      });
		}

		function buildFile(file) {
		  return file.filename + ";" + file.data;
		}

		function readFile(file, callback) {
  	  var reader = new FileReader();
      reader.onload = function(event) {
        object = {};
        object.filename = file.name;
        object.data = event.target.result;
        callback(object);
      };
      reader.readAsDataURL(file);
		}

		function postData(data) {
		  var AUTH_TOKEN = $('input[name=authenticity_token]').attr('value');

          $.ajax(
            {
              url: "<%= package_index_path(format: :json) %>?&authenticity_token=" + encodeURIComponent(AUTH_TOKEN),
              type: "POST",
              data: data,
              success:function(data, textStatus, jqXHR) {
                package_url = data.package.url
                checkPackage();
              },
                error: function(req, textStatus, errorThrown){
                    var infobox = $('#ajax-error');
                    $('#ajax-info').html("<strong>Warning! "+errorThrown+"</strong><br>The request couldn't complete. We're working on improvements (see <a href=\"https://github.com/theodi/csvlint/issues\">here</a> for more), and check here for a list of common failures");
                    infobox.removeClass('hidden');
                    infobox.addClass('alert alert-danger').fadeIn('slow');
                    //  infobox.append("<br>"+err); // if you want a verbose output
                    $('#submit i').removeClass('fa fa-refresh fa-spin'); // stop the spinner
                }
            }
          );
		}
        // the below is a shortcut of bootstrap functionality by jQuery
        $('#dismiss-ajax-alert').click(function(){
            $('#ajax-error').addClass('hidden');
        });


        function checkPackage() {
		   setInterval(function(){
          $.ajax({ url: package_url + ".json", success: function(data){
            if (data.package.validations.length == validation_count) {
              document.location.href = package_url
            }
          }, dataType: "json"});
      }, 5000);
		}

	});
</script>

<% end %>
